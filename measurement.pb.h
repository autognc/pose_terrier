// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurement.proto

#ifndef PROTOBUF_measurement_2eproto__INCLUDED
#define PROTOBUF_measurement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoMeas {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_measurement_2eproto();
void protobuf_AssignDesc_measurement_2eproto();
void protobuf_ShutdownFile_measurement_2eproto();

class Bearing;
class Measurements;
class Position;

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  inline Position* New() const { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ProtoMeas.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_measurement_2eproto();
  friend void protobuf_AssignDesc_measurement_2eproto();
  friend void protobuf_ShutdownFile_measurement_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Bearing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Bearing) */ {
 public:
  Bearing();
  virtual ~Bearing();

  Bearing(const Bearing& from);

  inline Bearing& operator=(const Bearing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bearing& default_instance();

  void Swap(Bearing* other);

  // implements Message ----------------------------------------------

  inline Bearing* New() const { return New(NULL); }

  Bearing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bearing& from);
  void MergeFrom(const Bearing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bearing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double az = 1;
  void clear_az();
  static const int kAzFieldNumber = 1;
  double az() const;
  void set_az(double value);

  // optional double el = 2;
  void clear_el();
  static const int kElFieldNumber = 2;
  double el() const;
  void set_el(double value);

  // @@protoc_insertion_point(class_scope:ProtoMeas.Bearing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double az_;
  double el_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_measurement_2eproto();
  friend void protobuf_AssignDesc_measurement_2eproto();
  friend void protobuf_ShutdownFile_measurement_2eproto();

  void InitAsDefaultInstance();
  static Bearing* default_instance_;
};
// -------------------------------------------------------------------

class Measurements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Measurements) */ {
 public:
  Measurements();
  virtual ~Measurements();

  Measurements(const Measurements& from);

  inline Measurements& operator=(const Measurements& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurements& default_instance();

  void Swap(Measurements* other);

  // implements Message ----------------------------------------------

  inline Measurements* New() const { return New(NULL); }

  Measurements* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Measurements& from);
  void MergeFrom(const Measurements& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Measurements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_feature_points = 1;
  void clear_num_feature_points();
  static const int kNumFeaturePointsFieldNumber = 1;
  ::google::protobuf::uint32 num_feature_points() const;
  void set_num_feature_points(::google::protobuf::uint32 value);

  // repeated .ProtoMeas.Position feature_points = 2;
  int feature_points_size() const;
  void clear_feature_points();
  static const int kFeaturePointsFieldNumber = 2;
  const ::ProtoMeas::Position& feature_points(int index) const;
  ::ProtoMeas::Position* mutable_feature_points(int index);
  ::ProtoMeas::Position* add_feature_points();
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >*
      mutable_feature_points();
  const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >&
      feature_points() const;

  // repeated .ProtoMeas.Bearing bearings = 3;
  int bearings_size() const;
  void clear_bearings();
  static const int kBearingsFieldNumber = 3;
  const ::ProtoMeas::Bearing& bearings(int index) const;
  ::ProtoMeas::Bearing* mutable_bearings(int index);
  ::ProtoMeas::Bearing* add_bearings();
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >*
      mutable_bearings();
  const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >&
      bearings() const;

  // @@protoc_insertion_point(class_scope:ProtoMeas.Measurements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position > feature_points_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing > bearings_;
  ::google::protobuf::uint32 num_feature_points_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_measurement_2eproto();
  friend void protobuf_AssignDesc_measurement_2eproto();
  friend void protobuf_ShutdownFile_measurement_2eproto();

  void InitAsDefaultInstance();
  static Measurements* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.x)
}

// optional double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.y)
}

// optional double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.z)
}

// -------------------------------------------------------------------

// Bearing

// optional double az = 1;
inline void Bearing::clear_az() {
  az_ = 0;
}
inline double Bearing::az() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Bearing.az)
  return az_;
}
inline void Bearing::set_az(double value) {
  
  az_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Bearing.az)
}

// optional double el = 2;
inline void Bearing::clear_el() {
  el_ = 0;
}
inline double Bearing::el() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Bearing.el)
  return el_;
}
inline void Bearing::set_el(double value) {
  
  el_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Bearing.el)
}

// -------------------------------------------------------------------

// Measurements

// optional uint32 num_feature_points = 1;
inline void Measurements::clear_num_feature_points() {
  num_feature_points_ = 0u;
}
inline ::google::protobuf::uint32 Measurements::num_feature_points() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.num_feature_points)
  return num_feature_points_;
}
inline void Measurements::set_num_feature_points(::google::protobuf::uint32 value) {
  
  num_feature_points_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Measurements.num_feature_points)
}

// repeated .ProtoMeas.Position feature_points = 2;
inline int Measurements::feature_points_size() const {
  return feature_points_.size();
}
inline void Measurements::clear_feature_points() {
  feature_points_.Clear();
}
inline const ::ProtoMeas::Position& Measurements::feature_points(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.feature_points)
  return feature_points_.Get(index);
}
inline ::ProtoMeas::Position* Measurements::mutable_feature_points(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMeas.Measurements.feature_points)
  return feature_points_.Mutable(index);
}
inline ::ProtoMeas::Position* Measurements::add_feature_points() {
  // @@protoc_insertion_point(field_add:ProtoMeas.Measurements.feature_points)
  return feature_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >*
Measurements::mutable_feature_points() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMeas.Measurements.feature_points)
  return &feature_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >&
Measurements::feature_points() const {
  // @@protoc_insertion_point(field_list:ProtoMeas.Measurements.feature_points)
  return feature_points_;
}

// repeated .ProtoMeas.Bearing bearings = 3;
inline int Measurements::bearings_size() const {
  return bearings_.size();
}
inline void Measurements::clear_bearings() {
  bearings_.Clear();
}
inline const ::ProtoMeas::Bearing& Measurements::bearings(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.bearings)
  return bearings_.Get(index);
}
inline ::ProtoMeas::Bearing* Measurements::mutable_bearings(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMeas.Measurements.bearings)
  return bearings_.Mutable(index);
}
inline ::ProtoMeas::Bearing* Measurements::add_bearings() {
  // @@protoc_insertion_point(field_add:ProtoMeas.Measurements.bearings)
  return bearings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >*
Measurements::mutable_bearings() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMeas.Measurements.bearings)
  return &bearings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >&
Measurements::bearings() const {
  // @@protoc_insertion_point(field_list:ProtoMeas.Measurements.bearings)
  return bearings_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMeas

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_measurement_2eproto__INCLUDED
